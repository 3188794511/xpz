<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lj.blog.mapper.CommentMapper">
	<resultMap id="baseComment" type="com.lj.vo.CommentVo">
		<id column="id" property="id"></id>
		<result column="user_id" property="userId"></result>
		<result column="parent_id" property="parentId"></result>
		<result column="content" property="content"></result>
		<result column="create_time" property="createTime"></result>
		<result column="update_time" property="updateTime"></result>
		<result column="is_deleted" property="isDeleted"></result>
		<result column="is_liked" property="isLiked"></result>
		<result column="blog_id" property="blogId"></result>
		<result column="blog_title" property="blogTile"></result>
		<result column="user_name" property="userName"></result>
		<result column="replay_user" property="parentCommentUser"></result>
	</resultMap>
	
	<select id="selectCommentPage" resultMap="baseComment">
		select
		c.*,b.title as blog_title,u.nick_name as user_name,u1.nick_name as replay_user
		from comment c
		inner join blog b on c.blog_id = b.id
		inner join xpz_user.tb_user u on c.user_id = u.id
		left join xpz_user.tb_user u1 on c.replay_user_id = u1.id
		<where>
			<if test="commentQueryDto.blogTitle != null">
			    b.title like CONCAT('%',#{commentQueryDto.blogTitle},'%')
			</if>
			<if test="commentQueryDto.userId != null">
				and b.author_id = #{commentQueryDto.userId}
			</if>
			<if test="commentQueryDto.commentUsername != null">
				and u.nick_name like CONCAT('%',#{commentQueryDto.commentUsername},'%')
			</if>
			 <if test="commentQueryDto.createTime != null">
				 and DATE(c.create_time) = DATE(#{commentQueryDto.createTime})
			 </if>
			and c.is_deleted = 0 and b.is_deleted = 0 and u.is_deleted = 0
		</where>
		order by c.create_time desc
			limit #{page}, #{size}
	</select>
	
	<select id="selectCountParam" resultType="java.lang.Long" parameterType="com.lj.dto.CommentQueryDto">
		select
			count(distinct c.id) as total
		from comment c
			     inner join blog b on c.blog_id = b.id
			     inner join xpz_user.tb_user u on c.user_id = u.id
		<where>
			<if test="commentQueryDto.blogTitle != null">
				b.title like CONCAT('%',#{commentQueryDto.blogTitle},'%')
			</if>
			<if test="commentQueryDto.userId != null">
				and b.author_id = #{commentQueryDto.userId}
			</if>
			<if test="commentQueryDto.commentUsername != null">
				and u.nick_name like CONCAT('%',#{commentQueryDto.commentUsername},'%')
			</if>
			<if test="commentQueryDto.createTime != null">
				and DATE(c.create_time) = DATE(#{commentQueryDto.createTime})
			</if>
			and c.is_deleted = 0 and b.is_deleted = 0 and u.is_deleted = 0
		</where>
	</select>
</mapper>
